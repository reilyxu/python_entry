#9-1 restaurant
class Restaurant():
	"""创建一个名为Restaurant的类"""
	def __init__(self,restaurant_name,cuisine_type):
		"""初始化属性"""
		self.restaurant_name=restaurant_name
		self.cuisine_type=cuisine_type
	def describe_restaurant(self):
  """方法1:打印两个属性"""
		print(self.restaurant_name.title()+" provides "+
			self.cuisine_type+".")
	def open_restaurant(self):
  """方法2:打印开张中"""
		print(self.restaurant_name.title()+" is opening!")

restaurant=Restaurant('KFC','Fast Food')
print(restaurant.restaurant_name+" "+restaurant.cuisine_type)
restaurant.describe_restaurant()
"""调用方法1"""
restaurant.open_restaurant()

#9-2 3 restaurant
restaurant1=Restaurant('hai di lao','hotpod')
restaurant2=Restaurant('mei zhou dong po','chuan')
restaurant1.describe_restaurant()
restaurant2.describe_restaurant()
"""省略"""

#9-3 user
class Users():
"""用户信息的类"""
	def __init__(self,first_name,last_name,gender,age):
		self.first_name=first_name
		self.last_name=last_name
		self.gender=gender
		self.age=age
	def describe_user(self):
  """打印信息"""
		print(self.first_name.title()+", "+self.last_name.title()
			+", "+self.gender+", "+str(self.age))
	def greet_user(self):
  """打招呼"""
		print("Hello! "+self.first_name.title()+" "+self.
			last_name.title())

user1=Users('reily','xu','female','22')
user1.describe_user()
user1.greet_user()

#9-4 就餐人数
class Restaurant():
	""""创建一个名为Restaurant的类"""
	def __init__(self,restaurant_name,cuisine_type):
		""""初始化属性"""
		self.restaurant_name=restaurant_name
		self.cuisine_type=cuisine_type
		self.number_served=0
	def describe_restaurant(self):
		print(self.restaurant_name.title()+" provides "+
			self.cuisine_type+".")
	def increment_numbers(self,number):
	"""增加就餐人数"""
		if number>=0:
			self.number_served+=number
		else:
			print("you can't roll back the number.")
		print('We have served '+str(self.number_served)+' customers. ')
	def open_restaurant(self):
		print(self.restaurant_name.title()+" is opening!")

restaurant=Restaurant('KFC','Fast Food')
print(restaurant.restaurant_name+" "+restaurant.cuisine_type)
restaurant.describe_restaurant()
restaurant.increment_numbers(50)
restaurant.open_restaurant()

#9-5 尝试登陆次数
class Users():
	def __init__(self,first_name,last_name,gender,age):
		self.first_name=first_name
		self.last_name=last_name
		self.gender=gender
		self.age=age
		self.login_attempts=0
	def describe_user(self):
		print(self.first_name.title()+", "+self.last_name.title()
			+", "+self.gender+", "+str(self.age))
	def greet_user(self):
		print("Hello! "+self.first_name.title()+" "+self.
			last_name.title())
	def increment_login_attempts(self):
		self.login_attempts+=1
		print('you have logined '+str(self.login_attempts)+' times.')
	def reset_login_attempts(self):
		self.login_attempts=0
		print('your login attempts have cleaned.')

user1=Users('reily','xu','female','24')
user1.describe_user()
user1.greet_user()
user1.increment_login_attempts()
user1.increment_login_attempts()
user1.reset_login_attempts()

#9-6 冰淇淋小店
class Restaurant():
	def __init__(self,restaurant_name,cuisine_type):
		self.restaurant_name=restaurant_name
		self.cuisine_type=cuisine_type
		self.number_served=0
	def describe_restaurant(self):
		print(self.restaurant_name.title()+" provides "+
			self.cuisine_type+".")
	def open_restaurant(self):
		print(self.restaurant_name.title()+" is opening!")

class IceCreamStand(Restaurant):
	def __init__(self,restaurant_name,cuisine_type):
		super().__init__(restaurant_name,cuisine_type)
		self.flavors=[]
		"""创建新属性flavor为列表"""
	def addflavor(self,newflavor):
	"""增加新口味"""
		self.flavors.append(newflavor)
	def reporticecream(self):
	"""汇报所有口味"""
		print('we have following flavors: ')
		for self.flavor in self.flavors:
			print(self.flavor.title())

myicecream=IceCreamStand('haagen dazs','ice cream')
myicecream.describe_restaurant()
myicecream.addflavor('green tea')
myicecream.addflavor('mango')
myicecream.addflavor('chocolate')
myicecream.addflavor('milk')
myicecream.reporticecream()

#9-7 管理员
class Users():
	def __init__(self,first_name,last_name,gender,age):
		self.first_name=first_name
		self.last_name=last_name
		self.gender=gender
		self.age=age
	def describe_user(self):
		print(self.first_name.title()+", "+self.last_name.title()
			+", "+self.gender+", "+str(self.age))
	def greet_user(self):
		print("Hello! "+self.first_name.title()+" "+self.
			last_name.title())

class Admin(Users):
	def __init__(self,first_name,last_name,gender,age):
		super().__init__(first_name,last_name,gender,age)
		self.privileges=['you can add post.','you can delete post.',
		'you can ban users.']
	def show_privileges(self):
		print("You have following privileges:")
		for self.privilege in self.privileges:
			print(self.privilege)

admin_xu=Admin('reily','xu','female','24')
admin_xu.show_privileges()

#9-8 权限
class Users():
	def __init__(self,first_name,last_name,gender,age):
		self.first_name=first_name
		self.last_name=last_name
		self.gender=gender
		self.age=age
	def describe_user(self):
		print(self.first_name.title()+", "+self.last_name.title()
			+", "+self.gender+", "+str(self.age))
	def greet_user(self):
		print("Hello! "+self.first_name.title()+" "+self.
			last_name.title())

class Privileges():
	def __init__(self,privileges=['you can add post.','you can delete post.',
		'you can ban users.']):
		self.privileges=privileges
	def show_privileges(self):
		print("You have following privileges:")
		for self.privilege in self.privileges:
			print(self.privilege)

class Admin(Users):
	def __init__(self,first_name,last_name,gender,age):
		super().__init__(first_name,last_name,gender,age)
		self.privileges=Privileges()

admin_xu=Admin('reily','xu','female','24')
admin_xu.privileges.show_privileges()

#9-9 电瓶升级
class Car():
	def __init__(self,make,model,year):
		self.make=make
		self.model=model
		self.year=year
		self.odometer_reading=0
	def get_descriptive_name(self):
		long_name=str(self.year)+' '+self.make+' '+self.model
		return long_name.title()
	def read_odometer(self):
		print('This car has '+str(self.odometer_reading)+' miles on it.')
	def update_odometer(self,mileage):
		if mileage>=self.odometer_reading:
			self.odometer_reading=mileage
		else:
			print('You can not roll back an odometer!')
	def increment_odometer(self,miles):
		self.odometer_reading+=miles

class Battery():
	def __init__(self,battery_size=70):
		self.battery_size=battery_size
	def describe_battery(self):
		print('This car has a '+str(self.battery_size)+'-kwh battery.')
	def get_range(self):
		if self.battery_size==70:
			range=240
		elif self.battery_size==85:
			range=270
		print('This car can go approximately '+str(range)
			+' miles on a full charge.')
	def upgrade_battery(self):
		if self.battery_size==85:
			print('The battery is new.')
		else:
			self.battery_size=85
			print('Battery size has been upgraded.')

class ElectricCar(Car):
	def __init__(self,make,model,year):
		super().__init__(make,model,year)
		self.battery=Battery()

my_tesla=ElectricCar('telsa','model s',2016)
my_tesla.battery.describe_battery()
my_tesla.battery.get_range()
my_tesla.battery.upgrade_battery()
my_tesla.battery.get_range()

#9-10 导入restaurant类
from Restaurant import Restaurant

my_restaurant=Restaurant('Hai Di Lao','Hotpot')
my_restaurant.describe_restaurant()

9-11~13
略

9-14
from random import randint

class Die():
	def __init__(self,sides=6):
		self.sides=sides
	def roll_die(self):
		x=randint(1,self.sides)
		print(x)

my_die = Die(10)

my_die.roll_die()
